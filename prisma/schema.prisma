generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model TypeOffice{
  id Int @id @default(autoincrement())
  name String @unique
  nomenclatureOffice NomenclatureOffice[]
}

model NomenclatureOffice{
  id Int @id @default(autoincrement())
  name String @unique
  TypeOffice TypeOffice? @relation(fields: [typeOffice_ID], references: [id], onDelete: Cascade)
  typeOffice_ID Int?
  users Users[]
}
model Phone{
  id Int @id @default(autoincrement())
  phone String @unique
  user_Id String
  user_phone Users @relation(fields: [user_Id], references: [CPF], onDelete: Cascade)
}

model Status{
  id Int @id @default(autoincrement())
  name String @unique
  users Users[]
}

model Sector{
  id Int @id @default(autoincrement())
  name String @unique
  users Users[]
}

model Secretary{
  id Int @id @default(autoincrement())
  name String @unique
  users Users[]
}

model Sex{
  id Int @id @default(autoincrement())
  name String @unique
  users Users[]
}

model Role {
  id Int @id @default(autoincrement())
  typeRole String @unique
  users Users[]
}

model Users{
  CPF String @id
  name String
  password String
  personal_email String? @unique
  corporate_email String? @unique
  matriculation String? @unique
  date_of_birth DateTime? @db.Date
  roleID Int
  role Role @relation(fields: [roleID], references: [id])
  sexID Int?
  sex Sex? @relation(fields: [sexID], references: [id])
  secretaryID Int?
  secretary Secretary? @relation(fields: [secretaryID], references: [id])
  sectorID   Int?
  sector Sector? @relation(fields: [sectorID], references: [id])
  nomenclatureOfficeID Int?
  NomenclatureOffice NomenclatureOffice? @relation(fields: [nomenclatureOfficeID], references: [id] )
  leaderId   String?
  leader     Users? @relation("UserToLeader",fields: [leaderId], references: [CPF])
  statusID   Int?
  status Status? @relation(fields: [statusID], references: [id])
  contracts UserContratc[]
  subordinates Users[] @relation("UserToLeader")
  phone Phone[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Contracts {
  numberContract  String   @id
  titulo     String
  nameObjetc String
  startDate  DateTime
  endDate    DateTime
  users      UserContratc[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserContratc { // Tabela intermedi√°ria
  userID      String
  contractID  String
  assignedAt  DateTime      @default(now()) 
  
  user       Users         @relation(fields: [userID], references: [CPF])
  project    Contracts      @relation(fields: [contractID], references: [numberContract])

  @@id([userID, contractID])
}